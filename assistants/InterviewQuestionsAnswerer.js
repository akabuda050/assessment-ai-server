const { Configuration, OpenAIApi } = require("openai");
const { gradesLevelsContext } = require("./context/gradesContext");
const {
  complexityLevelsContext,
} = require("./context/complexityLevelsContext");
const { detailLevelsContext } = require("./context/detailsLevelsContext");

class InterviewQuestionsAnswerer {
  constructor(apiKey) {
    this.configuration = new Configuration({
      apiKey,
    });
    this.openai = new OpenAIApi(this.configuration);
    this.defineRules();
  }

  defineRules() {
    this.rules = {
      role: "system",
      content: `
      You will act as a question answerer.
      You will be responsible in answering questions taking into account your experience and a level of details and a level of complexity.
      Ensure you do not generate any code if it not asked in question.

    ${complexityLevelsContext}
    ${detailLevelsContext}
    ${gradesLevelsContext}

    Your answer should not look like it was generated by AI or copied from the internet. 
    Add more naturalism. 
    Start answering in a natural manner non-corporate. 
    Do not reintroduce your experience or area of expertise. 
    Do not greet.

    Format of the answer is "
        <qa>
         <question>{question}</question>
         <answer>{answer}</answer>
         ...
       <qa>"

      If you are unable to identify or generate questions, return "<error>{reason}</error>".
        `,
    };
  }

  async answer(
    summaryOfTheExpirience,
    question,
    answerComplexityLevel,
    answerDetailsLevel
  ) {
    this.request = {
      role: "system",
      content: `  
      Answer question taking into account next information:
      `,
    };

    const messages = [
      this.rules,
      this.request,
      {
        role: "system",
        content: `Summary of your experience is: "${summaryOfTheExpirience}"\n
          Question: "${question}"\n
          Level of complexity of the answer: "${answerComplexityLevel}"\n
          Level of details of the answer: "${answerDetailsLevel}"\n
        "
        `,
      },
    ];

    // @ts-ignore
    const response = await this.openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      // @ts-ignore.
      messages: messages,
    });

    const input = response.data.choices[0]?.message?.content || "";
    console.log(input);
    const regex = /<question>(.*?)<\/question>/g;
    const questionsMatch = input.match(regex);

    const questions =
      questionsMatch?.map(
        (question) =>
          (question && question.replace(/<\/?question>/g, ``)) || null
      ) || [];

    const answersRegex = /<answer>(.*?)<\/answer>/g;
    const answersMatch = input.match(answersRegex);

    const answers =
      answersMatch?.map(
        (answer) => (answer && answer.replace(/<\/?answer>/g, ``)) || null
      ) || [];

    const regex2 = /<error>(.*?)<\/error>/;
    const error = regex2.exec(input);

    return {
      qa: {
        questions,
        answers,
      },
      error: (error && error[1]) || null,
    };
  }
}

const bot = new InterviewQuestionsAnswerer(
  ""
);

bot
  .answer(
    `
Software Engineer with over 4 years of commercial experience in PHP, Laravel/Symfony, MySQL, PostgreSQL, OOP, Design patterns, RabbitMQ, Docker/Vagrant, Unit tests, HTML/CSS, Git/svn, Linux/Ubuntu. Their key responsibilities include developing web software applications using PHP, Laravel/Self-written framework, MySQL, Docker, Unit tests, RabbitMQ, creating full-stack web applications using PHP, MySQL, Bitrix CMS, JavaScript, HTML/CSS, and developing IT-finance apps using PHP, Symfony, MySQL, ReactJS, RabbitMQ. They have skills in web development, product development, and outsourcing. You are adept and suitable for a Junior Web Software Engineer role.

`,
    `What design patterns you're familiar with?`,
    `Basic`,
    `Brief Explanation`
  )
  .then((answer) => {
    console.log(answer);
  });
